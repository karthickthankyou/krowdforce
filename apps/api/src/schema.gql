# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  name: String
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: Employee!
  employer: Employer!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Employee {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  skills: [SubCategory!]!
}

type Employer {
  companyId: Int!
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type SubCategory {
  name: String!
  categoryName: String!
  jobs: [Job!]!
  employees: [Employee!]!
  category: Category!
}

type Job {
  addressId: Int
  status: JobStatus!
  type: JobType!
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  description: String!
  address: Address
  skills: [SubCategory!]!
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

type Address {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  lat: Int!
  lng: Int!
  skills: [Job!]!
}

type Category {
  name: String!
  subCategories: [SubCategory!]!
}

type Admin {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  user(where: UserWhereUniqueInput): User!
  admins(distinct: [AdminScalarFieldEnum!], where: AdminWhereInput, orderBy: [AdminOrderByWithRelationInput!], cursor: AdminWhereUniqueInput, take: Int, skip: Int): [Admin!]!
  admin(where: AdminWhereUniqueInput): Admin!
  employees(distinct: [EmployeeScalarFieldEnum!], where: EmployeeWhereInput, orderBy: [EmployeeOrderByWithRelationInput!], cursor: EmployeeWhereUniqueInput, take: Int, skip: Int): [Employee!]!
  employee(where: EmployeeWhereUniqueInput): Employee!
  employers(distinct: [EmployerScalarFieldEnum!], where: EmployerWhereInput, orderBy: [EmployerOrderByWithRelationInput!], cursor: EmployerWhereUniqueInput, take: Int, skip: Int): [Employer!]!
  employer(where: EmployerWhereUniqueInput): Employer!
  jobs(distinct: [JobScalarFieldEnum!], where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int): [Job!]!
  job(where: JobWhereUniqueInput): Job!
  addresses(distinct: [AddressScalarFieldEnum!], where: AddressWhereInput, orderBy: [AddressOrderByWithRelationInput!], cursor: AddressWhereUniqueInput, take: Int, skip: Int): [Address!]!
  address(where: AddressWhereUniqueInput): Address!
  categories(distinct: [CategoryScalarFieldEnum!], where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int): [Category!]!
  category(where: CategoryWhereUniqueInput): Category!
  subCategories(distinct: [SubCategoryScalarFieldEnum!], where: SubCategoryWhereInput, orderBy: [SubCategoryOrderByWithRelationInput!], cursor: SubCategoryWhereUniqueInput, take: Int, skip: Int): [SubCategory!]!
  subCategory(where: SubCategoryWhereUniqueInput): SubCategory!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  image: StringFilter
  employee: EmployeeRelationFilter
  employer: EmployerRelationFilter
  Admin: AdminRelationFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

input EmployeeWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  skills: SubCategoryListRelationFilter
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input SubCategoryListRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input SubCategoryWhereInput {
  name: StringFilter
  categoryName: StringFilter
  category: CategoryRelationFilter
  employees: EmployeeListRelationFilter
  jobs: JobListRelationFilter
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  name: StringFilter
  subCategories: SubCategoryListRelationFilter
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  some: EmployeeWhereInput
  none: EmployeeWhereInput
}

input JobListRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input JobWhereInput {
  status: JobStatus
  type: JobType
  companyId: IntFilter
  Company: CompanyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
  description: StringFilter
  addressId: IntFilter
  start: DateTimeFilter
  end: DateTimeFilter
  salary: IntFilter
  skills: SubCategoryListRelationFilter
  address: AddressRelationFilter
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  id: IntFilter
  name: StringFilter
  Employer: EmployerListRelationFilter
  Job: JobListRelationFilter
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input EmployerListRelationFilter {
  every: EmployerWhereInput
  some: EmployerWhereInput
  none: EmployerWhereInput
}

input EmployerWhereInput {
  companyId: IntFilter
  company: CompanyRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  job: JobListRelationFilter
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input FloatFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input EmployerRelationFilter {
  is: EmployerWhereInput
  isNot: EmployerWhereInput
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input UserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  image: SortOrder
  employee: EmployeeOrderByWithRelationInput
  employer: EmployerOrderByWithRelationInput
  Admin: AdminOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input EmployeeOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  skills: SubCategoryOrderByRelationAggregateInput
}

input SubCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployerOrderByWithRelationInput {
  companyId: SortOrder
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  company: CompanyOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  Employer: EmployerOrderByRelationAggregateInput
  Job: JobOrderByRelationAggregateInput
}

input EmployerOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input UserWhereUniqueInput {
  uid: String!
}

enum AdminScalarFieldEnum {
  uid
  createdAt
  updatedAt
}

input AdminWhereUniqueInput {
  uid: String!
}

enum EmployeeScalarFieldEnum {
  uid
  createdAt
  updatedAt
}

input EmployeeWhereUniqueInput {
  uid: String!
}

enum EmployerScalarFieldEnum {
  uid
  createdAt
  updatedAt
  companyId
}

input EmployerWhereUniqueInput {
  uid: String!
}

enum JobScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  description
  addressId
  status
  type
  start
  end
  salary
  companyId
}

input JobOrderByWithRelationInput {
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  id: SortOrder
  title: SortOrder
  description: SortOrder
  addressId: SortOrder
  status: SortOrder
  type: SortOrder
  start: SortOrder
  end: SortOrder
  salary: SortOrder
  Company: CompanyOrderByWithRelationInput
  skills: SubCategoryOrderByRelationAggregateInput
  address: AddressOrderByWithRelationInput
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: SortOrder
  lat: SortOrder
  lng: SortOrder
  job: JobOrderByRelationAggregateInput
}

input JobWhereUniqueInput {
  id: Int
}

enum AddressScalarFieldEnum {
  id
  createdAt
  updatedAt
  address
  lat
  lng
}

input AddressWhereUniqueInput {
  id: Int
}

enum CategoryScalarFieldEnum {
  name
}

input CategoryOrderByWithRelationInput {
  name: SortOrder
  subCategories: SubCategoryOrderByRelationAggregateInput
}

input CategoryWhereUniqueInput {
  name: String!
}

enum SubCategoryScalarFieldEnum {
  name
  categoryName
}

input SubCategoryOrderByWithRelationInput {
  name: SortOrder
  categoryName: SortOrder
  category: CategoryOrderByWithRelationInput
  employees: EmployeeOrderByRelationAggregateInput
  jobs: JobOrderByRelationAggregateInput
}

input EmployeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubCategoryWhereUniqueInput {
  name: String!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput): Admin!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  updateEmployee(updateEmployeeInput: UpdateEmployeeInput!): Employee!
  removeEmployee(where: EmployeeWhereUniqueInput): Employee!
  createEmployer(createEmployerInput: CreateEmployerInput!): Employer!
  updateEmployer(updateEmployerInput: UpdateEmployerInput!): Employer!
  removeEmployer(where: EmployerWhereUniqueInput): Employer!
  createJob(createJobInput: CreateJobInput!): Job!
  updateJob(updateJobInput: UpdateJobInput!): Job!
  removeJob(where: JobWhereUniqueInput): Job!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(where: AddressWhereUniqueInput): Address!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(where: CategoryWhereUniqueInput): Category!
  createSubCategory(createSubCategoryInput: CreateSubCategoryInput!): SubCategory!
  updateSubCategory(updateSubCategoryInput: UpdateSubCategoryInput!): SubCategory!
  removeSubCategory(where: SubCategoryWhereUniqueInput): SubCategory!
}

input CreateUserInput {
  name: String
  image: String
  uid: String!
}

input UpdateUserInput {
  name: String
  image: String
  uid: String!
}

input CreateAdminInput {
  uid: String!
}

input UpdateAdminInput {
  uid: String!
}

input CreateEmployeeInput {
  uid: String!
}

input UpdateEmployeeInput {
  uid: String!
}

input CreateEmployerInput {
  uid: String!
}

input UpdateEmployerInput {
  uid: String!
}

input CreateJobInput {
  addressId: Int
  status: JobStatus!
  type: JobType!
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int!
  title: String!
  description: String!
}

input UpdateJobInput {
  addressId: Int
  status: JobStatus
  type: JobType
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int
  title: String
  description: String
  id: Int!
}

input CreateAddressInput {
  address: String!
  lat: Int!
  lng: Int!
}

input UpdateAddressInput {
  address: String
  lat: Int
  lng: Int
  id: Int!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String!
}

input CreateSubCategoryInput {
  name: String!
  categoryName: String!
}

input UpdateSubCategoryInput {
  name: String!
  categoryName: String
}