# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Job {
  employerId: String
  contactInfo: String
  addressId: Int
  status: JobStatus!
  type: JobType!
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  description: String!
  address: Address
  skills: [SubCategory!]!
  company: Company!
  employer: Employer
  applications: [Application!]!
  applicationsCount: Int!
  bookmarks: [Bookmark!]!
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Address {
  lat: Float!
  lng: Float!
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  jobs: [Job!]!
}

type AggregateCountOutput {
  count: Int!
}

type Admin {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubCategory {
  name: String!
  categoryName: String!
  jobs: [Job!]!
  employees: [Employee!]!
  category: Category!
}

type Category {
  name: String!
  subCategories: [SubCategory!]!
}

type Employer {
  uid: String!
  companyId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  company: Company
  jobs: [Job!]!
}

type Company {
  description: String
  addressId: Int!
  id: Int!
  name: String!
  address: Address!
  jobs: [Job!]!
  employers: [Employer!]!
}

type User {
  name: String
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: Employee!
  employer: Employer!
}

type Employee {
  addressId: Int!
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  about: String!
  user: User!
  skills: [SubCategory!]!
  applications: [Application!]!
  bookmarks: [Bookmark!]!
}

type Application {
  status: ApplicationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  employeeId: String!
  jobId: Int!
  employee: Employee!
  job: Job!
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  INTERVIEWED
  OFFERED
  REJECTED
  ACCEPTED
  WITHDRAW
}

type Bookmark {
  createdAt: DateTime!
  updatedAt: DateTime!
  employeeId: String!
  jobId: Int!
  employee: Employee!
  job: Job!
}

type Query {
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  user(where: UserWhereUniqueInput): User!
  admins(distinct: [AdminScalarFieldEnum!], where: AdminWhereInput, orderBy: [AdminOrderByWithRelationInput!], cursor: AdminWhereUniqueInput, take: Int, skip: Int): [Admin!]!
  admin(where: AdminWhereUniqueInput): Admin!
  employees(distinct: [EmployeeScalarFieldEnum!], where: EmployeeWhereInput, orderBy: [EmployeeOrderByWithRelationInput!], cursor: EmployeeWhereUniqueInput, take: Int, skip: Int): [Employee!]!
  employee(where: EmployeeWhereUniqueInput): Employee!
  employeeMe: Employee
  employers(distinct: [EmployerScalarFieldEnum!], where: EmployerWhereInput, orderBy: [EmployerOrderByWithRelationInput!], cursor: EmployerWhereUniqueInput, take: Int, skip: Int): [Employer!]!
  companyEmployers(distinct: [EmployerScalarFieldEnum!], where: EmployerWhereInput, orderBy: [EmployerOrderByWithRelationInput!], cursor: EmployerWhereUniqueInput, take: Int, skip: Int): [Employer!]!
  employer(where: EmployerWhereUniqueInput): Employer!
  employerMe: Employer!
  companies(distinct: [CompanyScalarFieldEnum!], where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int): [Company!]!
  company(where: CompanyWhereUniqueInput): Company!
  employerCompany: Company!
  jobs(distinct: [JobScalarFieldEnum!], where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int): [Job!]!
  searchJobs(locationFilter: LocationFilterInput!, jobFilter: JobFilter): [Job!]!
  jobAggregate(jobFilter: JobFilter, locationFilter: LocationFilterInput!): AggregateCountOutput!
  employerJobs(distinct: [JobScalarFieldEnum!], where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int): [Job!]!
  companyJobs(distinct: [JobScalarFieldEnum!], where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int): [Job!]!
  job(where: JobWhereUniqueInput): Job!
  addresses(distinct: [AddressScalarFieldEnum!], where: AddressWhereInput, orderBy: [AddressOrderByWithRelationInput!], cursor: AddressWhereUniqueInput, take: Int, skip: Int): [Address!]!
  address(where: AddressWhereUniqueInput): Address!
  categories(distinct: [CategoryScalarFieldEnum!], where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int): [Category!]!
  category(where: CategoryWhereUniqueInput): Category!
  subCategories(distinct: [SubCategoryScalarFieldEnum!], where: SubCategoryWhereInput, orderBy: [SubCategoryOrderByWithRelationInput!], cursor: SubCategoryWhereUniqueInput, take: Int, skip: Int): [SubCategory!]!
  subCategory(where: SubCategoryWhereUniqueInput): SubCategory!
  applications(distinct: [ApplicationScalarFieldEnum!], where: ApplicationWhereInput, orderBy: [ApplicationOrderByWithRelationInput!], cursor: ApplicationWhereUniqueInput, take: Int, skip: Int): [Application!]!
  myApplications(distinct: [ApplicationScalarFieldEnum!], where: ApplicationWhereInput, orderBy: [ApplicationOrderByWithRelationInput!], cursor: ApplicationWhereUniqueInput, take: Int, skip: Int): [Application!]!
  application(where: ApplicationWhereUniqueInput): Application!
  bookmarks(distinct: [BookmarkScalarFieldEnum!], where: BookmarkWhereInput, orderBy: [BookmarkOrderByWithRelationInput!], cursor: BookmarkWhereUniqueInput, take: Int, skip: Int): [Bookmark!]!
  myBookmarks(distinct: [BookmarkScalarFieldEnum!], where: BookmarkWhereInput, orderBy: [BookmarkOrderByWithRelationInput!], cursor: BookmarkWhereUniqueInput, take: Int, skip: Int): [Bookmark!]!
  bookmark(where: BookmarkWhereUniqueInput): Bookmark!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  image: StringFilter
  employee: EmployeeRelationFilter
  employer: EmployerRelationFilter
  Admin: AdminRelationFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

input EmployeeWhereInput {
  addressId: IntFilter
  address: AddressRelationFilter
  about: StringFilter
  Bookmark: BookmarkListRelationFilter
  Application: ApplicationListRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  skills: SubCategoryListRelationFilter
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  Employee: EmployeeListRelationFilter
  Company: CompanyListRelationFilter
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  job: JobListRelationFilter
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  some: EmployeeWhereInput
  none: EmployeeWhereInput
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input CompanyWhereInput {
  description: StringFilter
  addressId: IntFilter
  address: AddressRelationFilter
  id: IntFilter
  name: StringFilter
  Employer: EmployerListRelationFilter
  Job: JobListRelationFilter
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input EmployerListRelationFilter {
  every: EmployerWhereInput
  some: EmployerWhereInput
  none: EmployerWhereInput
}

input EmployerWhereInput {
  Job: JobListRelationFilter
  companyId: IntFilter
  company: CompanyRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
}

input JobListRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input JobWhereInput {
  status: JobStatus
  type: JobType
  Bookmark: BookmarkListRelationFilter
  Application: ApplicationListRelationFilter
  employerId: StringFilter
  Employer: EmployerRelationFilter
  contactInfo: StringFilter
  companyId: IntFilter
  Company: CompanyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
  description: StringFilter
  addressId: IntFilter
  start: DateTimeFilter
  end: DateTimeFilter
  salary: IntFilter
  skills: SubCategoryListRelationFilter
  address: AddressRelationFilter
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input BookmarkListRelationFilter {
  every: BookmarkWhereInput
  some: BookmarkWhereInput
  none: BookmarkWhereInput
}

input BookmarkWhereInput {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employeeId: StringFilter
  jobId: IntFilter
  employee: EmployeeRelationFilter
  job: JobRelationFilter
  AND: [BookmarkWhereInput!]
  OR: [BookmarkWhereInput!]
  NOT: [BookmarkWhereInput!]
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

input ApplicationListRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input ApplicationWhereInput {
  status: ApplicationStatus
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employeeId: StringFilter
  jobId: IntFilter
  employee: EmployeeRelationFilter
  job: JobRelationFilter
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input EmployerRelationFilter {
  is: EmployerWhereInput
  isNot: EmployerWhereInput
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input SubCategoryListRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input SubCategoryWhereInput {
  name: StringFilter
  categoryName: StringFilter
  category: CategoryRelationFilter
  employees: EmployeeListRelationFilter
  jobs: JobListRelationFilter
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  name: StringFilter
  subCategories: SubCategoryListRelationFilter
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input FloatFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input UserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  image: SortOrder
  employee: EmployeeOrderByWithRelationInput
  employer: EmployerOrderByWithRelationInput
  Admin: AdminOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input EmployeeOrderByWithRelationInput {
  addressId: SortOrder
  about: SortOrder
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  Bookmark: BookmarkOrderByRelationAggregateInput
  Application: ApplicationOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  skills: SubCategoryOrderByRelationAggregateInput
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: SortOrder
  lat: SortOrder
  lng: SortOrder
  Employee: EmployeeOrderByRelationAggregateInput
  job: JobOrderByRelationAggregateInput
  Company: CompanyOrderByRelationAggregateInput
}

input EmployeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookmarkOrderByRelationAggregateInput {
  _count: SortOrder
}

input ApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployerOrderByWithRelationInput {
  companyId: SortOrder
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Job: JobOrderByRelationAggregateInput
  company: CompanyOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input CompanyOrderByWithRelationInput {
  description: SortOrder
  addressId: SortOrder
  id: SortOrder
  name: SortOrder
  address: AddressOrderByWithRelationInput
  Employer: EmployerOrderByRelationAggregateInput
  Job: JobOrderByRelationAggregateInput
}

input EmployerOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input UserWhereUniqueInput {
  uid: String!
}

enum AdminScalarFieldEnum {
  uid
  createdAt
  updatedAt
}

input AdminWhereUniqueInput {
  uid: String!
}

enum EmployeeScalarFieldEnum {
  uid
  about
  createdAt
  updatedAt
  addressId
}

input EmployeeWhereUniqueInput {
  uid: String!
}

enum EmployerScalarFieldEnum {
  uid
  createdAt
  updatedAt
  companyId
}

input EmployerWhereUniqueInput {
  uid: String!
}

enum CompanyScalarFieldEnum {
  id
  name
  description
  addressId
}

input CompanyWhereUniqueInput {
  id: Int
}

enum JobScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  description
  addressId
  status
  type
  start
  end
  salary
  contactInfo
  companyId
  employerId
}

input JobOrderByWithRelationInput {
  employerId: SortOrder
  contactInfo: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  id: SortOrder
  title: SortOrder
  description: SortOrder
  addressId: SortOrder
  status: SortOrder
  type: SortOrder
  start: SortOrder
  end: SortOrder
  salary: SortOrder
  Bookmark: BookmarkOrderByRelationAggregateInput
  Application: ApplicationOrderByRelationAggregateInput
  Employer: EmployerOrderByWithRelationInput
  Company: CompanyOrderByWithRelationInput
  skills: SubCategoryOrderByRelationAggregateInput
  address: AddressOrderByWithRelationInput
}

input JobWhereUniqueInput {
  id: Int
}

input LocationFilterInput {
  ne_lat: Float!
  ne_lng: Float!
  sw_lat: Float!
  sw_lng: Float!
}

input JobFilter {
  where: JobWhereInput
  orderBy: [JobOrderByWithRelationInput!]
  take: Int
  skip: Int
}

enum AddressScalarFieldEnum {
  id
  createdAt
  updatedAt
  address
  lat
  lng
}

input AddressWhereUniqueInput {
  id: Int
}

enum CategoryScalarFieldEnum {
  name
}

input CategoryOrderByWithRelationInput {
  name: SortOrder
  subCategories: SubCategoryOrderByRelationAggregateInput
}

input CategoryWhereUniqueInput {
  name: String!
}

enum SubCategoryScalarFieldEnum {
  name
  categoryName
}

input SubCategoryOrderByWithRelationInput {
  name: SortOrder
  categoryName: SortOrder
  category: CategoryOrderByWithRelationInput
  employees: EmployeeOrderByRelationAggregateInput
  jobs: JobOrderByRelationAggregateInput
}

input SubCategoryWhereUniqueInput {
  name: String!
}

enum ApplicationScalarFieldEnum {
  createdAt
  updatedAt
  employeeId
  jobId
  status
}

input ApplicationOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  employeeId: SortOrder
  jobId: SortOrder
  status: SortOrder
  employee: EmployeeOrderByWithRelationInput
  job: JobOrderByWithRelationInput
}

input ApplicationWhereUniqueInput {
  employeeId_jobId: EmployeeIdJobIdCompoundUniqueInput!
}

input EmployeeIdJobIdCompoundUniqueInput {
  employeeId: String!
  jobId: Int!
}

enum BookmarkScalarFieldEnum {
  createdAt
  updatedAt
  employeeId
  jobId
}

input BookmarkOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  employeeId: SortOrder
  jobId: SortOrder
  employee: EmployeeOrderByWithRelationInput
  job: JobOrderByWithRelationInput
}

input BookmarkWhereUniqueInput {
  employeeId_jobId: EmployeeIdJobIdCompoundUniqueInput!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput): Admin!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  updateEmployee(updateEmployeeInput: UpdateEmployeeInput!): Employee!
  removeEmployee(where: EmployeeWhereUniqueInput): Employee!
  createEmployer(createEmployerInput: CreateEmployerInput!): Employer
  updateEmployer(updateEmployerInput: UpdateEmployerInput!): Employer!
  removeEmployer(where: EmployerWhereUniqueInput): Employer!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  addEmployer(addEmployerInput: AddEmployerInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  removeCompany(where: CompanyWhereUniqueInput): Company!
  createJob(createJobInput: CreateJobInput!): Job!
  updateJob(updateJobInput: UpdateJobInput!): Job!
  removeJob(where: JobWhereUniqueInput): Job!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(where: AddressWhereUniqueInput): Address!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(where: CategoryWhereUniqueInput): Category!
  createSubCategory(createSubCategoryInput: CreateSubCategoryInput!): SubCategory!
  updateSubCategory(updateSubCategoryInput: UpdateSubCategoryInput!): SubCategory!
  removeSubCategory(where: SubCategoryWhereUniqueInput): SubCategory!
  createApplication(createApplicationInput: CreateApplicationInput!): Application!
  updateApplication(updateApplicationInput: UpdateApplicationInput!): Application!
  removeApplication(where: ApplicationWhereUniqueInput): Application!
  createBookmark(createBookmarkInput: CreateBookmarkInput!): Bookmark!
  updateBookmark(updateBookmarkInput: UpdateBookmarkInput!): Bookmark!
  removeBookmark(where: BookmarkWhereUniqueInput): Bookmark!
}

input CreateUserInput {
  name: String
  image: String
  uid: String!
}

input UpdateUserInput {
  name: String
  image: String
  uid: String!
}

input CreateAdminInput {
  uid: String!
}

input UpdateAdminInput {
  uid: String!
}

input CreateEmployeeInput {
  uid: String!
  about: String!
  address: CreateAddressInput!
  skills: [String!]!
}

input CreateAddressInput {
  lat: Float!
  lng: Float!
  address: String!
}

input UpdateEmployeeInput {
  uid: String!
  about: String
  address: CreateAddressInput
  skills: [String!]
}

input CreateEmployerInput {
  uid: String!
}

input UpdateEmployerInput {
  uid: String!
}

input CreateCompanyInput {
  description: String
  name: String!
  address: CreateAddressInput!
  uid: String!
}

input AddEmployerInput {
  uid: String!
}

input UpdateCompanyInput {
  description: String
  name: String
  address: CreateAddressInput
  uid: String
  id: Int!
}

input CreateJobInput {
  employerId: String
  status: JobStatus!
  type: JobType!
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int!
  title: String!
  description: String!
  address: CreateAddressInput
  companyAddressId: Int
  skills: [ConnectSubCategoryInput!]!
}

input ConnectSubCategoryInput {
  name: String!
}

input UpdateJobInput {
  employerId: String
  status: JobStatus
  type: JobType
  start: DateTime
  end: DateTime
  salary: Int
  companyId: Int
  title: String
  description: String
  companyAddressId: Int
  id: Int!
}

input UpdateAddressInput {
  lat: Float
  lng: Float
  address: String
  id: Int!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String!
}

input CreateSubCategoryInput {
  name: String!
  categoryName: String!
}

input UpdateSubCategoryInput {
  name: String!
  categoryName: String
}

input CreateApplicationInput {
  employeeId: String!
  jobId: Int!
}

input UpdateApplicationInput {
  employeeId: String
  jobId: Int
  status: ApplicationStatus!
  employeeId_jobId: EmployeeIdJobIdCompoundUniqueInput!
}

input CreateBookmarkInput {
  employeeId: String!
  jobId: Int!
}

input UpdateBookmarkInput {
  employeeId: String
  jobId: Int
  employeeId_jobId: EmployeeIdJobIdCompoundUniqueInput!
}