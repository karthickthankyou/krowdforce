// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid       String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String?
    image    String?
    employee Employee?
    employer Employer?
    Admin    Admin?
}

model Admin {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Employer {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company? @relation(fields: [companyId], references: [id])
    companyId Int?
}

model Employee {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    skills SubCategory[]
}

model Company {
    id        Int        @id @default(autoincrement())
    name      String
    Employer  Employer[]
    Job       Job[]
    addressId Int?
    address   Address?   @relation(fields: [addressId], references: [id])
}

model Job {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String

    skills    SubCategory[]
    addressId Int?
    address   Address?      @relation(fields: [addressId], references: [id])

    status JobStatus
    type   JobType
    start  DateTime?
    end    DateTime?
    salary Int?

    Company   Company? @relation(fields: [companyId], references: [id])
    companyId Int?
}

model Address {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   String
    lat       Float
    lng       Float

    job     Job[]
    Company Company[]
}

model Category {
    name          String        @id
    subCategories SubCategory[]
}

model SubCategory {
    name         String   @id
    category     Category @relation(fields: [categoryName], references: [name])
    categoryName String

    employees Employee[]
    jobs      Job[]
}

enum JobStatus {
    DRAFT
    OPEN
    CLOSED
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
}
