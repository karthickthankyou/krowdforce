// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid       String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String?
    image    String?
    employee Employee?
    employer Employer?
    Admin    Admin?

    followedBy Follow[] @relation("FollowedBy")
    following  Follow[] @relation("Following")
    Post       Post[]
}

model Follow {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    followerId String
    follower   User   @relation("Following", fields: [followerId], references: [uid])

    followingId String
    following   User   @relation("FollowedBy", fields: [followingId], references: [uid])

    @@unique([followerId, followingId])
}

model Post {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String
    image     String?

    authorId String
    author   User   @relation(fields: [authorId], references: [uid])
}

model Admin {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Employer {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    company   Company? @relation(fields: [companyId], references: [id])
    companyId Int?
    Job       Job[]
}

model Employee {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    about       String
    contactInfo String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    skills      SubCategory[]
    Bookmark    Bookmark[]
    Application Application[]

    addressId  Int
    address    Address      @relation(fields: [addressId], references: [id])
    Employment Employment[]
    Attendance Attendance[]
}

model Employment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startDate DateTime  @default(now())
    endDate   DateTime?

    jobId Int
    job   Job @relation(fields: [jobId], references: [id])

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [uid])
}

model Company {
    id          Int        @id @default(autoincrement())
    name        String
    description String?
    Employer    Employer[]
    Job         Job[]
    addressId   Int?
    address     Address?   @relation(fields: [addressId], references: [id])
}

model Job {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String

    skills    SubCategory[]
    addressId Int?
    address   Address?      @relation(fields: [addressId], references: [id])

    status     JobStatus
    type       JobType
    start      DateTime?
    end        DateTime?
    payPerHour Float     @default(20)

    contactInfo String?

    Company     Company       @relation(fields: [companyId], references: [id])
    companyId   Int
    Employer    Employer?     @relation(fields: [employerId], references: [uid])
    employerId  String?
    Bookmark    Bookmark[]
    Application Application[]
    Employment  Employment[]

    shiftInformation ShiftInformation?
    Attendance       Attendance[]
}

model ShiftInformation {
    jobId     Int       @id
    startTime String
    endTime   String
    days      Weekday[]
    Job       Job       @relation(fields: [jobId], references: [id])
}

model Attendance {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    clockIn    DateTime
    clockOut   DateTime?
    employeeId String
    employee   Employee  @relation(fields: [employeeId], references: [uid])
    jobId      Int
    job        Job       @relation(fields: [jobId], references: [id])

    paid Boolean? @default(false)
}

model Application {
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [uid])

    jobId Int
    job   Job @relation(fields: [jobId], references: [id])

    status ApplicationStatus? @default(SUBMITTED)

    @@id([employeeId, jobId])
}

model Bookmark {
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [uid])

    jobId Int
    job   Job @relation(fields: [jobId], references: [id])

    @@id([employeeId, jobId])
}

model Address {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   String
    lat       Float
    lng       Float

    job      Job[]
    Company  Company[]
    Employee Employee[]
}

model Category {
    name          String        @id
    subCategories SubCategory[]
}

model SubCategory {
    name         String   @id
    category     Category @relation(fields: [categoryName], references: [name])
    categoryName String

    employees Employee[]
    jobs      Job[]
}

enum JobStatus {
    DRAFT
    OPEN
    CLOSED
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
}

enum ApplicationStatus {
    SUBMITTED
    UNDER_REVIEW
    INTERVIEWED
    OFFERED

    REJECTED
    ACCEPTED
    WITHDRAW

    EMPLOYED
}

enum Weekday {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}
