query Users(
  $skip: Int
  $take: Int
  $cursor: UserWhereUniqueInput
  $orderBy: [UserOrderByWithRelationInput!]
  $where: UserWhereInput
  $distinct: [UserScalarFieldEnum!]
) {
  users(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    image
    uid
    createdAt
    name
  }
}

query User($where: UserWhereUniqueInput) {
  user(where: $where) {
    name
    image
    updatedAt
    createdAt
    uid
  }
}

mutation CreateUser($createUserInput: CreateUserInput!) {
  createUser(createUserInput: $createUserInput) {
    image
  }
}

query EmployerMe {
  employerMe {
    uid
    createdAt
    user {
      image
      name
    }
    company {
      name
      description
      address {
        address
        lat
        lng
      }
    }
  }
}
query EmployeeMe {
  employeeMe {
    uid
    about
    createdAt
    user {
      image
      name
    }
  }
}
mutation createEmployer($createEmployerInput: CreateEmployerInput!) {
  createEmployer(createEmployerInput: $createEmployerInput) {
    uid
  }
}

mutation createEmployee($createEmployeeInput: CreateEmployeeInput!) {
  createEmployee(createEmployeeInput: $createEmployeeInput) {
    uid
  }
}

fragment applications on Application {
  status
  job {
    id
  }
  employee {
    uid
    about
    skills {
      name
    }
    user {
      uid
      name
      image
    }
  }
}

fragment employerJobDetails on Job {
  id
  salary
  skills {
    name
    category {
      name
    }
  }
  address {
    address
    lat
    lng
  }
  company {
    name
    address {
      address
      lat
      lng
    }
  }
  applications {
    ...applications
  }
  applicationsCount
  description
  end
  start
  status
  title
  type
}

query CompanyJobs(
  $skip: Int
  $take: Int
  $cursor: JobWhereUniqueInput
  $orderBy: [JobOrderByWithRelationInput!]
  $where: JobWhereInput
  $distinct: [JobScalarFieldEnum!]
) {
  companyJobs(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...employerJobDetails
  }
}

query EmployerJobs(
  $skip: Int
  $take: Int
  $cursor: JobWhereUniqueInput
  $orderBy: [JobOrderByWithRelationInput!]
  $where: JobWhereInput
  $distinct: [JobScalarFieldEnum!]
) {
  employerJobs(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...employerJobDetails
  }
}

mutation createJob($createJobInput: CreateJobInput!) {
  createJob(createJobInput: $createJobInput) {
    id
  }
}

query EmployerCompany {
  employerCompany {
    id
    name
    address {
      id
      address
      lat
      lng
    }
  }
}

query SubCategories(
  $skip: Int
  $take: Int
  $cursor: SubCategoryWhereUniqueInput
  $orderBy: [SubCategoryOrderByWithRelationInput!]
  $where: SubCategoryWhereInput
  $distinct: [SubCategoryScalarFieldEnum!]
) {
  subCategories(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    name
    categoryName
  }
}

query SearchJobs($locationFilter: LocationFilterInput!, $jobFilter: JobFilter) {
  searchJobs(locationFilter: $locationFilter, jobFilter: $jobFilter) {
    id
    company {
      name
    }
    skills {
      name
      categoryName
    }
    address {
      id
      lat
      lng
      address
    }
    description
    end
    salary
    start
    status
    title
    type
  }

  jobAggregate(locationFilter: $locationFilter, jobFilter: $jobFilter) {
    count
  }
}

query Job($where: JobWhereUniqueInput) {
  job(where: $where) {
    id
    salary
    contactInfo
    skills {
      name
      categoryName
    }
    start
    status
    title
    type
    end
    description
    createdAt
    company {
      name
      address {
        address
        lat
        lng
      }
    }
    address {
      address
      lat
      lng
    }
    employer {
      uid
      user {
        image
        name
      }
    }
  }
}

query Company($where: CompanyWhereUniqueInput) {
  company(where: $where) {
    id
    name
    description
    address {
      lat
      lng
      address
    }
    jobs {
      id
      title
      status
      type
      skills {
        name
      }
    }
    employers {
      uid
      user {
        name
        image
      }
    }
  }
}

mutation addEmployer($addEmployerInput: AddEmployerInput!) {
  addEmployer(addEmployerInput: $addEmployerInput) {
    id
  }
}

mutation createCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}

query Bookmark($where: BookmarkWhereUniqueInput) {
  bookmark(where: $where) {
    jobId
    employeeId
  }
}

mutation createBookmark($createBookmarkInput: CreateBookmarkInput!) {
  createBookmark(createBookmarkInput: $createBookmarkInput) {
    jobId
    employeeId
  }
}

mutation removeBookmark($where: BookmarkWhereUniqueInput) {
  removeBookmark(where: $where) {
    employeeId
    jobId
  }
}

fragment jobFrag on Job {
  id
  type
  title
  status
  skills {
    name
  }
  start
  salary
  end
  companyId
  description
  createdAt
  address {
    lat
    lng
    address
  }
}

query myBookmarks(
  $skip: Int
  $take: Int
  $cursor: BookmarkWhereUniqueInput
  $orderBy: [BookmarkOrderByWithRelationInput!]
  $where: BookmarkWhereInput
  $distinct: [BookmarkScalarFieldEnum!]
) {
  myBookmarks(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    job {
      ...jobFrag
    }
  }
}

query myApplications(
  $skip: Int
  $take: Int
  $cursor: ApplicationWhereUniqueInput
  $orderBy: [ApplicationOrderByWithRelationInput!]
  $where: ApplicationWhereInput
  $distinct: [ApplicationScalarFieldEnum!]
) {
  myApplications(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    job {
      ...jobFrag
    }
  }
}

query companyApplications(
  $skip: Int
  $take: Int
  $cursor: ApplicationWhereUniqueInput
  $orderBy: [ApplicationOrderByWithRelationInput!]
  $where: ApplicationWhereInput
  $distinct: [ApplicationScalarFieldEnum!]
) {
  companyApplications(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    job {
      ...jobFrag
    }
    status
    employee {
      uid
      user {
        name
        image
      }
    }
  }
}

mutation createApplication($createApplicationInput: CreateApplicationInput!) {
  createApplication(createApplicationInput: $createApplicationInput) {
    jobId
    employeeId
    status
  }
}

mutation removeApplication($where: ApplicationWhereUniqueInput) {
  removeApplication(where: $where) {
    employeeId
    jobId
  }
}

query application($where: ApplicationWhereUniqueInput) {
  application(where: $where) {
    jobId
    employeeId
    status
  }
}

mutation updateApplication($updateApplicationInput: UpdateApplicationInput!) {
  updateApplication(updateApplicationInput: $updateApplicationInput) {
    status
    jobId
  }
}

query Applications(
  $skip: Int
  $take: Int
  $cursor: ApplicationWhereUniqueInput
  $orderBy: [ApplicationOrderByWithRelationInput!]
  $where: ApplicationWhereInput
  $distinct: [ApplicationScalarFieldEnum!]
) {
  applications(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...applications
  }
}

query SearchEmployees(
  $locationFilter: LocationFilterInput!
  $employeeFilter: EmployeeFilter
) {
  searchEmployees(
    locationFilter: $locationFilter
    employeeFilter: $employeeFilter
  ) {
    skills {
      name
    }
    about
    address {
      lng
      lat
      address
    }
    user {
      uid
      name
      image
    }
  }
  employeeAggregate(
    locationFilter: $locationFilter
    employeeFilter: $employeeFilter
  ) {
    count
  }
}

query Employee($where: EmployeeWhereUniqueInput) {
  employee(where: $where) {
    createdAt
    uid
    contactInfo
    user {
      name
      image
    }
    skills {
      name
    }
    address {
      lat
      lng
      address
    }
    about
  }
}

mutation createFollow($createFollowInput: CreateFollowInput!) {
  createFollow(createFollowInput: $createFollowInput) {
    id
    followingId
    followerId
  }
}

query follow($where: FollowWhereUniqueInput) {
  follow(where: $where) {
    id
    followingId
    followerId
    createdAt
  }
}

mutation removeFollow($where: FollowWhereUniqueInput) {
  removeFollow(where: $where) {
    id
  }
}

fragment followInfo on User {
  name
  uid
  image
  createdAt
}

query followedByMe {
  followedByMe {
    id

    following {
      ...followInfo
    }
    createdAt
  }
}

query followers {
  followers {
    id

    follower {
      ...followInfo
    }
    createdAt
  }
}

query followSuggestions(
  $skip: Int
  $take: Int
  $cursor: UserWhereUniqueInput
  $orderBy: [UserOrderByWithRelationInput!]
  $where: UserWhereInput
  $distinct: [UserScalarFieldEnum!]
) {
  users(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...followInfo
  }
}

query EmployeeStats {
  employeeStats {
    followers
    followedBy
    bookmarks
    applications
  }
}

query CompanyStats {
  companyStats {
    jobs {
      name
      count
    }
    applications {
      name
      count
    }
  }
}

query CompanyEmployees(
  $skip: Int
  $take: Int
  $cursor: EmployeeWhereUniqueInput
  $orderBy: [EmployeeOrderByWithRelationInput!]
  $where: EmployeeWhereInput
  $distinct: [EmployeeScalarFieldEnum!]
) {
  companyEmployees(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    createdAt
    user {
      uid
      name
      image
    }
    skills {
      name
    }
  }
}

query CompanyEmployers {
  companyEmployers {
    createdAt
    user {
      name
      image
      uid
    }
  }
}

mutation createEmployment($createEmploymentInput: CreateEmploymentInput!) {
  createEmployment(createEmploymentInput: $createEmploymentInput) {
    id
  }
}

mutation acceptOffer($updateApplicationInput: UpdateApplicationInput!) {
  acceptOffer(updateApplicationInput: $updateApplicationInput) {
    jobId
    employeeId
  }
}

query MyEmployments(
  $skip: Int
  $take: Int
  $orderBy: [EmploymentOrderByWithRelationInput!]
  $where: EmploymentWhereInput
) {
  myEmployments(skip: $skip, take: $take, orderBy: $orderBy, where: $where) {
    id
    job {
      id
      title
      company {
        name
      }
      shiftInformation {
        startTime
        endTime
        days
      }
    }
    startDate
    endDate
  }
}
