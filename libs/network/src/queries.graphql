query Users(
  $skip: Int
  $take: Int
  $cursor: UserWhereUniqueInput
  $orderBy: [UserOrderByWithRelationInput!]
  $where: UserWhereInput
  $distinct: [UserScalarFieldEnum!]
) {
  users(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    image
    uid
    createdAt
    name
  }
}

query User($where: UserWhereUniqueInput) {
  user(where: $where) {
    name
    image
    updatedAt
    createdAt
    uid
  }
}

mutation CreateUser($createUserInput: CreateUserInput!) {
  createUser(createUserInput: $createUserInput) {
    image
  }
}

query EmployerMe {
  employerMe {
    uid
    createdAt
    user {
      image
      name
    }
    company {
      name
      description
      address {
        address
        lat
        lng
      }
    }
  }
}

mutation createEmployer($createEmployerInput: CreateEmployerInput!) {
  createEmployer(createEmployerInput: $createEmployerInput) {
    uid
  }
}

fragment employerJobDetails on Job {
  id
  salary
  skills {
    name
    category {
      name
    }
  }
  address {
    address
    lat
    lng
  }
  company {
    name
    address {
      address
      lat
      lng
    }
  }
  description
  end
  start
  status
  title
  type
}

query CompanyJobs(
  $skip: Int
  $take: Int
  $cursor: JobWhereUniqueInput
  $orderBy: [JobOrderByWithRelationInput!]
  $where: JobWhereInput
  $distinct: [JobScalarFieldEnum!]
) {
  companyJobs(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...employerJobDetails
  }
}

query EmployerJobs(
  $skip: Int
  $take: Int
  $cursor: JobWhereUniqueInput
  $orderBy: [JobOrderByWithRelationInput!]
  $where: JobWhereInput
  $distinct: [JobScalarFieldEnum!]
) {
  employerJobs(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...employerJobDetails
  }
}

mutation createJob($createJobInput: CreateJobInput!) {
  createJob(createJobInput: $createJobInput) {
    id
  }
}

query EmployerCompany {
  employerCompany {
    id
    name
    address {
      id
      address
      lat
      lng
    }
  }
}

query SubCategories(
  $skip: Int
  $take: Int
  $cursor: SubCategoryWhereUniqueInput
  $orderBy: [SubCategoryOrderByWithRelationInput!]
  $where: SubCategoryWhereInput
  $distinct: [SubCategoryScalarFieldEnum!]
) {
  subCategories(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    name
    categoryName
  }
}

query SearchJobs($locationFilter: LocationFilterInput!, $jobFilter: JobFilter) {
  searchJobs(locationFilter: $locationFilter, jobFilter: $jobFilter) {
    id
    company {
      name
    }
    skills {
      name
      categoryName
    }
    address {
      id
      lat
      lng
      address
    }
    description
    end
    salary
    start
    status
    title
    type
  }

  jobAggregate(locationFilter: $locationFilter, jobFilter: $jobFilter) {
    count
  }
}

query Job($where: JobWhereUniqueInput) {
  job(where: $where) {
    id
    salary
    contactInfo
    skills {
      name
      categoryName
    }
    start
    status
    title
    type
    end
    description
    createdAt
    company {
      name
      address {
        address
        lat
        lng
      }
    }
    address {
      address
      lat
      lng
    }
    employer {
      uid
      user {
        image
        name
      }
    }
  }
}

query Company($where: CompanyWhereUniqueInput) {
  company(where: $where) {
    id
    name
    description
    address {
      lat
      lng
      address
    }
    jobs {
      id
      title
      status
      type
      skills {
        name
      }
    }
    employers {
      uid
      user {
        name
        image
      }
    }
  }
}

query CompanyEmployers {
  companyEmployers {
    createdAt
    user {
      name
      image
      uid
    }
  }
}

mutation addEmployer($addEmployerInput: AddEmployerInput!) {
  addEmployer(addEmployerInput: $addEmployerInput) {
    id
  }
}

mutation createCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}
